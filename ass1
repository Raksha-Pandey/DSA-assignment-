#include <iostream>
using namespace std;

#define MAX 100

void createArray(int arr[], int &n) {
    cout << "Enter number of elements: ";
    cin >> n;
    cout << "Enter the elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
}

void displayArray(int arr[], int n) {
    if (n == 0) {
        cout << "Array is empty.\n";
        return;
    }
    cout << "Array elements: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

void insertElement(int arr[], int &n) {
    if (n >= MAX) {
        cout << "Array is full! Cannot insert.\n";
        return;
    }
    int pos, val;
    cout << "Enter position to insert (1-based index): ";
    cin >> pos;
    cout << "Enter value to insert: ";
    cin >> val;

    if (pos < 1 || pos > n+1) {
        cout << "Invalid position!\n";
        return;
    }

    for (int i = n; i >= pos; i--) {
        arr[i] = arr[i-1];
    }
    arr[pos-1] = val;
    n++;
    cout << "Element inserted.\n";
}

void deleteElement(int arr[], int &n) {
    if (n == 0) {
        cout << "Array is empty!\n";
        return;
    }
    int pos;
    cout << "Enter position to delete : ";
    cin >> pos;
    if (pos < 1 || pos > n) {
        cout << "Invalid position!\n";
        return;
    }
    int deleted = arr[pos-1];
    for (int i = pos-1; i < n-1; i++) {
        arr[i] = arr[i+1];
    }
    n--;
    cout << "Element " << deleted << " deleted.\n";
}

void linearSearch(int arr[], int n) {
    if (n == 0) {
        cout << "Array is empty.\n";
        return;
    }
    int val, found = 0;
    cout << "Enter value to search for: ";
    cin >> val;
    for (int i = 0; i < n; i++) {
        if (arr[i] == val) {
            cout << "Value found at position " << (i+1) << ".\n";
            found = 1;
            break;
        }
    }
    if (!found) {
        cout << "Value not found in array.\n";
    }
}

int main() {
    int arr[MAX], n = 0, choice;
    do {
        cout << "\nMENU\n";
        cout << "1.CREATE\n2.DISPLAY\n3.INSERT\n4.DELETE\n5.LINEAR SEARCH\n6.EXIT\n";
        cout << "Enter your choice (1-6): ";
        cin >> choice;
        switch (choice) {
            case 1: createArray(arr, n); break;
            case 2: displayArray(arr, n); break;
            case 3: insertElement(arr, n); break;
            case 4: deleteElement(arr, n); break;
            case 5: linearSearch(arr, n); break;
            case 6: cout << "Exiting program.\n"; break;
            default: cout << "Invalid choice!\n";
        }
    } while (choice != 6);
    return 0;
}



#include <iostream>
using namespace std;

#define MAX 100

void removeDuplicates(int arr[], int &n) {
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; ) {
            if (arr[i] == arr[j]) {
              for (int k = j; k < n - 1; k++) {
                    arr[k] = arr[k + 1];
                }
                n--; 
            } else {
                j++;
            }
        }
    }
}

void displayArray(int arr[], int n) {
    cout << "Array with unique elements: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int arr[MAX], n;
    cout << "Enter number of elements: ";
    cin >> n;
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    removeDuplicates(arr, n);
    displayArray(arr, n);
    return 0;
}



Output: 10000 



#include <iostream>
using namespace std;

void reverseArray(int arr[], int n) {
    int start = 0, end = n-1;
    while (start < end) {
        swap(arr[start], arr[end]);
        start++;
        end--;
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5}, n = 5;
    reverseArray(arr, n);
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    return 0;
}



#include <iostream>
using namespace std;

int main() {
    int a[2][3] = {{1,2,3},{4,5,6}};
    int b[3][2] = {{1,2},{3,4},{5,6}};
    int c[2][2] = {0};

    for(int i=0;i<2;i++)
        for(int j=0;j<2;j++)
            for(int k=0;k<3;k++)
                c[i][j] += a[i][k]*b[k][j];

    for(int i=0;i<2;i++) {
        for(int j=0;j<2;j++)
            cout<<c[i][j]<<" ";
        cout<<endl;
    }
    return 0;
}




#include <iostream>
using namespace std;

int main() {
    int a[2][3] = {{1,2,3},{4,5,6}};
    int trans[3][2];

    for(int i=0;i<2;i++)
        for(int j=0;j<3;j++)
            trans[j][i] = a[i][j];

    for(int i=0;i<3;i++) {
        for(int j=0;j<2;j++)
            cout<<trans[i][j]<<" ";
        cout<<endl;
    }
    return 0;
}



#include <iostream>
using namespace std;

int main() {
    const int rows = 3, cols = 3;
    int a[rows][cols] = { {1,2,3}, {4,5,6}, {7,8,9} };

    // Row sums
    for(int i=0; i<rows; i++) {
        int rowSum = 0;
        for(int j=0; j<cols; j++)
            rowSum += a[i][j];
        cout << "Sum of row " << i+1 << " = " << rowSum << endl;
    }

    // Column sums
    for(int j=0; j<cols; j++) {
        int colSum = 0;
        for(int i=0; i<rows; i++)
            colSum += a[i][j];
        cout << "Sum of column " << j+1 << " = " << colSum << endl;
    }
    return 0;
}

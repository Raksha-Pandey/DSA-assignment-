#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() {
        head = nullptr;
    }

    void insertAtfront(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
        cout << "Inserted " << value << " at beginning.\n";
    }
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            cout << "Inserted " << value << " at end.\n";
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
        cout << "Inserted " << value << " at end.\n";
    }
    void insertSpecific(int value, int key, bool after) {
        Node* newNode = new Node(value);
        Node* temp = head;
        Node* prev = nullptr;

        while (temp != nullptr && temp->data != key) {
            prev = temp;
            temp = temp->next;
        }
            if (temp == nullptr) {
            cout << "Node " << key << " not found.\n";
            delete newNode;
            return;
        }

        if (after) { 
            newNode->next = temp->next;
            temp->next = newNode;
            cout << "Inserted " << value << " after " << key << ".\n";
        } else { 
            if (temp == head) {
                newNode->next = head;
                head = newNode;
            } else {
                prev->next = newNode;
                newNode->next = temp;
            }
            cout << "Inserted " << value << " before " << key << ".\n";
        }
    }
    void deleteFromfront() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        head = head->next;
        cout << "Deleted " << temp->data << " from beginning.\n";
        delete temp;
    }
    void deleteFromEnd() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        if (head->next == nullptr) {
            cout << "Deleted " << head->data << " from end.\n";
            delete head;
            head = nullptr;
            return;
        }

        Node* temp = head;
        while (temp->next->next != nullptr)
            temp = temp->next;

        cout << "Deleted " << temp->next->data << " from end.\n";
        delete temp->next;
        temp->next = nullptr;
    }
    void deleteSpecific(int key) {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }

        if (head->data == key) {
            Node* temp = head;
            head = head->next;
            cout << "Deleted node " << key << ".\n";
            delete temp;
            return;
        }

        Node* temp = head;
        Node* prev = nullptr;

        while (temp != nullptr && temp->data != key) {
            prev = temp;
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Node " << key << " not found.\n";
            return;
        }

        prev->next = temp->next;
        cout << "Deleted node " << key << ".\n";
        delete temp;
    }
    void searchNode(int key) {
        Node* temp = head;
        int pos = 1;

        while (temp != nullptr) {
            if (temp->data == key) {
                cout << "Node " << key << " found at position " << pos << ".\n";
                return;
            }
            temp = temp->next;
            pos++;
        }
        cout << "Node " << key << " not found.\n";
    }
    void display() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        cout << "Linked List: ";
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};`

int main() {
    LinkedList list;
    int choice, value, key;

    while (true) {
        cout << "\n Singly Linked List Operations \n";
        cout << "1. Insert at Beginning\n";
        cout << "2. Insert at End\n";
        cout << "3. Insert Before a Node\n";
        cout << "4. Insert After a Node\n";
        cout << "5. Delete from Beginning\n";
        cout << "6. Delete from End\n";
        cout << "7. Delete Specific Node\n";
        cout << "8. Search Node\n";
        cout << "9. Display List\n";
        cout << "10. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value: ";
                cin >> value;
                list.insertAtfront(value);
                break;
            case 2:
                cout << "Enter value: ";
                cin >> value;
                list.insertAtEnd(value);
                break;
            case 3:
                cout << "Enter value and key: ";
                cin >> value >> key;
                list.insertSpecific(value, key, false);
                break;
            case 4:
                list.deleteFromfront();
                break;
            case 5:
                list.deleteFromEnd();
                break;
            case 6:
                cout << "Enter key to delete: ";
                cin >> key;
                list.deleteSpecific(key);
                break;
            case 7:
                cout << "Enter key to search: ";
                cin >> key;
                list.searchNode(key);
                break;
            case 8:
                list.display();
                break;
            case 9:
                cout << "Exiting program \n";
                return 0;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    }
}



#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node* next;
    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() {
        head = nullptr;
    }
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
    }

    void deleteAllOccurrences(int key) {
        int count = 0;
        while (head != nullptr && head->data == key) {
            Node* temp = head;
            head = head->next;
            delete temp;
            count++;
        }
        Node* current = head;
        Node* prev = nullptr;

        while (current != nullptr) {
            if (current->data == key) {
                Node* temp = current;
                prev->next = current->next;  // unlink
                current = current->next;
                delete temp;
                count++;
            } else {
                prev = current;
                current = current->next;
            }
        }

        cout << "Key " << key << " occurred " << count << " times and deleted.\n";
    }

    void display() {
        Node* temp = head;
        if (temp == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        cout << "Linked List: ";
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

int main() {
    LinkedList list;
    int n, val, key;

    cout << "Enter number of elements: ";
    cin >> n;
    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> val;
        list.insertAtEnd(val);
    }
   cout << "\nOriginal List:\n";
    list.display();

    cout << "\nEnter key to delete: ";
    cin >> key;

    list.deleteAllOccurrences(key);

    cout << "\nUpdated List:\n";
    list.display();

    return 0;
}



#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node* next;
    Node(int value) {
        data = value;
        next = nullptr;
    }
};
class LinkedList {
public:
    Node* head;

    LinkedList() {
        head = nullptr;
    }

    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
    }

    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }

    void findMiddle() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }

        Node* slow = head;
        Node* fast = head;

        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }

        cout << "Middle element is: " << slow->data << endl;
    }
};

int main() {
    LinkedList list;
    int n, val;

    cout << "Enter number of elements: ";
    cin >> n;

    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> val;
        list.insertAtEnd(val);
    }

    cout << "\nLinked List:\n";
    list.display();

    list.findMiddle();

    return 0;
}



#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node* next;
    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class LinkedList {
public:
    Node* head;

    LinkedList() {
        head = nullptr;
    }
        void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
    }

    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }

    void reverseList() {
        Node *prev = nullptr, *current = head, *next = nullptr;
            while (current != nullptr) {
            next = current->next;   
            current->next = prev;  
            prev = current;         
            current = next;        
        }
        head = prev;
        cout << "Linked list reversed successfully.\n";
    }
};
int main() {
    LinkedList list;
    int n, val;
    cout << "Enter number of elements: ";
    cin >> n;
    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> val;
        list.insertAtEnd(val);
    }
    cout << "\nOriginal Linked List:\n";
    list.display();
    list.reverseList();
    cout << "\nReversed Linked List:\n";
    list.display();

    return 0;
}





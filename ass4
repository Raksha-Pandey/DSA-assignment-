#include <iostream>
using namespace std;
#define MAX 5
int queue[MAX];
int front = -1, rear = -1;

bool isFull() {
    return (rear == MAX - 1);
}

bool isEmpty() {
    return (front == -1 || front > rear);
}

void enqueue(int val) {
    if (isFull())
        cout << "Queue Overflow!" << endl;
    else {
        if (front == -1) front = 0;
        rear++;
        queue[rear] = val;
        cout << val << " enqueued." << endl;
    }
}

void dequeue() {
    if (isEmpty())
        cout << "Queue Underflow!" << endl;
    else {
        cout << queue[front] << " dequeued." << endl;
        front++;
    }
}

void peek() {
    if (isEmpty())
        cout << "Queue is empty!" << endl;
    else
        cout << "Front element: " << queue[front] << endl;
}

void display() {
    if (isEmpty())
        cout << "Queue is empty!" << endl;
    else {
        cout << "Queue elements: ";
        for (int i = front; i <= rear; i++)
            cout << queue[i] << " ";
        cout << endl;
    }
}

int main() {
    int choice, val;
    do {
        cout << "\nQueue Menu  ";
        cout << "\n1. Enqueue\n2. Dequeue\n3. Peek\n4. Display\n5. isEmpty\n6. isFull\n7. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value: ";
                cin >> val;
                enqueue(val);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                peek();
                break;
            case 4:
                display();
                break;
            case 5:
                cout << (isEmpty() ? "Queue is Empty" : "Queue is not Empty") << endl;
                break;
            case 6:
                cout << (isFull() ? "Queue is Full" : "Queue is not Full") << endl;
                break;
            case 7:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice!" << endl;
        }
    } while (choice != 7);
    return 0;
}



#include <iostream>
using namespace std;
#define MAX 5
int cq[MAX];
int front = -1, rear = -1;

bool isFull() {
    return ((rear + 1) % MAX == front);
}

bool isEmpty() {
    return (front == -1);
}

void enqueue(int val) {
    if (isFull())
        cout << "Circular Queue Overflow!" << endl;
    else {
        if (front == -1) front = 0;
        rear = (rear + 1) % MAX;
        cq[rear] = val;
        cout << val << " enqueued." << endl;
    }
}

void dequeue() {
    if (isEmpty())
        cout << "Circular Queue Underflow!" << endl;
    else {
        cout << cq[front] << " dequeued." << endl;
        if (front == rear)
            front = rear = -1; 
        else
            front = (front + 1) % MAX;
    }
}

void peek() {
    if (isEmpty())
        cout << "Queue is empty!" << endl;
    else
        cout << "Front element: " << cq[front] << endl;
}

void display() {
    if (isEmpty())
        cout << "Queue is empty!" << endl;
    else {
        cout << "Circular Queue elements: ";
        int i = front;
        while (true) {
            cout << cq[i] << " ";
            if (i == rear) break;
            i = (i + 1) % MAX;
        }
        cout << endl;
    }
}

int main() {
    int choice, val;
    do {
        cout << "\nCircular Queue Menu ";
        cout << "\n1. Enqueue\n2. Dequeue\n3. Peek\n4. Display\n5. isEmpty\n6. isFull\n7. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: cout << "Enter value: "; cin >> val; enqueue(val); break;
            case 2: dequeue(); break;
            case 3: peek(); break;
            case 4: display(); break;
            case 5: cout << (isEmpty() ? "Queue is Empty" : "Queue is not Empty") << endl; break;
            case 6: cout << (isFull() ? "Queue is Full" : "Queue is not Full") << endl; break;
            case 7: cout << "Exiting" << endl; break;
            default: cout << "Invalid choice!" << endl;
        }
    } while (choice != 7);
    return 0;
}



#include <iostream>
#include <queue>
using namespace std;

void interleaveQueue(queue<int>& q) {
    int n = q.size();
    int half = n/2;
    queue<int>firstHalf;

    for (int i = 0; i < half; i++) {
        firstHalf.push(q.front());
        q.pop();
    }

    while (!firstHalf.empty()) {
        q.push(firstHalf.front());
        firstHalf.pop();
        q.push(q.front());
        q.pop();
    }
}

int main() {
    queue<int> q;
    int n, val;
    cout << "Enter number of elements (even count): ";
    cin >> n;

    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) {
        cin >> val;
        q.push(val);
    }

    interleaveQueue(q);
    cout << "Interleaved queue: ";
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << endl;
    return 0;
}



#include <iostream>
#include <queue>
using namespace std;
int main() {
    string str;
    cout << "Enter stream of characters: ";
    cin >> str;

    queue<char> q;
    int freq[26] = {0};

    for (char ch : str) {
        freq[ch - 'a']++;
        q.push(ch);

        while (!q.empty() && freq[q.front() - 'a'] > 1)
            q.pop();
        if (q.empty())
            cout << "-1 ";
        else
            cout << q.front() << " ";
    }
    cout << endl;
    return 0;
}



#include <iostream>
#include <queue>
using namespace std;

class Stack {
    queue<int>q1, q2;
public:
    void push(int x) {
        q2.push(x);
        while (!q1.empty()) {
            q2.push(q1.front());
            q1.pop();
        }
        swap(q1, q2);
    }

    void pop() {
        if (q1.empty()) {
            cout << "Stack Underflow!" << endl;
            return;
        }
        q1.pop();
    }

    int top() {
        return q1.empty() ? -1 : q1.front();
    }

    bool empty() {
        return q1.empty();
    }
};

int main() {
    Stack s;
    s.push(10);
    s.push(20);
    s.push(30);
    cout << "Top: " << s.top() << endl;
    s.pop();
    cout << "Top after pop: " << s.top() << endl;
    return 0;
}



#include <iostream>
#include <queue>
using namespace std;
class Stack {
    queue<int> q;
public:
    void push(int x) {
        q.push(x);
        for (int i = 0; i < q.size() - 1; i++) {
            q.push(q.front());
            q.pop();
        }
    }
     void pop() {
        if (q.empty()) cout << "Stack Underflow!" << endl;
        else q.pop();
    }
     int top() {
        return q.empty() ? -1 : q.front();
    }
     bool empty() {
        return q.empty();
    }
};

int main() {
    Stack s;
    s.push(5);
    s.push(10);
    s.push(15);
    cout << "Top: " << s.top() << endl;
    s.pop();
    cout << "Top after pop: " << s.top() << endl;
    return 0;
}




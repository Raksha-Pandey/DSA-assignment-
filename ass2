#include <iostream>
using namespace std;

int binarySearch(int array[], int n, int target) {
    int left = 0;
    int right = n - 1;
    
    while (left <= right) {
        int mid = left + (right - left) / 2; 
        if (array[mid] == target)
            return mid;  
        if (array[mid] < target)
            left = mid + 1; 
        else
            right = mid - 1; 
    }
    return -1; 
}

int main() {
    int arr[] = {2, 4, 7, 9, 10, 13, 20};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 13;

    int result = binarySearch(arr, n, target);
    if (result != -1)
        cout << "Element found at index " << result << endl;
    else
        cout << "Element not found in array." << endl;
    return 0;
}



#include <iostream>
using namespace std;

void bubbleSort(int arr[], int n) {
    for(int i = 0; i < n-1; ++i) {
        for(int j = 0; j < n-i-1; ++j) {
            if(arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);
    bubbleSort(arr, n);
    for(int i = 0; i < n; ++i) cout << arr[i] << " ";
    return 0;
}



#include <iostream>
using namespace std;

int findMissingLinear(int arr[], int n) {
    for(int i = 0; i < n; ++i) {
        if(arr[i] != i+1) return i+1;
    }
    return n+1;
}

int main() {
    int arr[] = {1,2,3,5,6};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << findMissingLinear(arr, n) << endl; // Output: 4
    return 0;
}



int findMissingBinary(int arr[], int n) {
    int left = 0, right = n-1, mid;
    while(left <= right) {
        mid = left + (right - left) / 2;
        if(arr[mid] == mid+1) left = mid+1;
        else right = mid-1;
    }
    return left+1;
}



#include <iostream>
#include <string>
using namespace std;

int main() {
    char str1[100] = "Hello ";
    char str2[] = "World!";
    strcat(str1, str2);
    cout << str1 << endl;
    return 0;
}



#include <iostream>
#include <string>
using namespace std;

void reverseStr(char s[]) {
    int n = strlen(s);
    for(int i = 0; i < n/2; ++i) {
        swap(s[i], s[n-i-1]);
    }
}

int main() {
    char s[] = "Hello";
    reverseStr(s);
    cout << s << endl;
    return 0;
}



#include <iostream>
using namespace std;

bool isVowel(char c) {
    return c=='a' || c=='e' || c=='i' || c=='o' || c=='u' ||
           c=='A' || c=='E' || c=='I' || c=='O' || c=='U';
}

void removeVowels(char s[]) {
    int j = 0;
    for(int i = 0; s[i] != '\0'; i++) {  // using i++
        if (!isVowel(s[i]))
            s[j++] = s[i];
    }
    s[j] = '\0';
}

int main() {
    char s[] = "Hello World";
    removeVowels(s);
    cout << s << endl; 
    return 0;
}



#include <iostream>
#include <string>
using namespace std;

void bubbleSort(string arr[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                // Swap arr[j] and arr[j+1]
                string temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    string arr[] = {"banana", "apple", "grape", "orange"};
    int n = sizeof(arr) / sizeof(arr[0]);
    bubbleSort(arr, n);
    for (int i = 0; i < n; ++i)
        cout << arr[i] << " ";
    cout << endl;
    return 0;
}



#include <iostream>
using namespace std;
int main() {
    char c = 'A';  
    if (c >= 'A' && c <= 'Z') {
        c = c + 32;
    }
    cout << c << endl;  
    return 0;
}



#include <iostream>
using namespace std;

int main() {
    int n = 4;
    int A[4] = {0}; 

    
    for (int i = 0; i < n; i++) {
        cout << "Enter A[" << i + 1 << "][" << i + 1 << "]: ";
        cin >> A[i];
    }

    cout << "\nDiagonal Matrix:\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j)
                cout << A[i] << " ";
            else
                cout << "0 ";
        }
        cout << endl;
    }
}



#include <iostream>
using namespace std;
int main() {
    int n = 4;
    int size = 3 * n - 2;
    int A[size] = {0};

    cout << "Enter elements for Tri-diagonal Matrix:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            int x;
            cin >> x;
            if (i - j == 1)
                A[i - 2] = x;             
            else if (i - j == 0)
                A[n - 1 + i - 1] = x;     
            else if (i - j == -1)
                A[2 * n - 1 + i - 1] = x;
        }
    }
    cout << "\nTri-diagonal Matrix:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i - j == 1)
                cout << A[i - 2] << " ";
            else if (i - j == 0)
                cout << A[n - 1 + i - 1] << " ";
            else if (i - j == -1)
                cout << A[2 * n - 1 + i - 1] << " ";
            else
                cout << "0 ";
        }
        cout << endl;
    }
}



#include <iostream>
using namespace std;
int main() {
    int n = 4;
    int size = n*(n + 1) / 2;
    int A[size] = {0};

    cout << "Enter elements for Lower Triangular Matrix:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            int x;
            cin >> x;
            if (i >= j)
                A[i *(i - 1) / 2 +(j - 1)] = x;
        }
    }
    cout << "\nLower Triangular Matrix:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i >= j)
                cout << A[i * (i - 1) / 2 + (j - 1)] << " ";
            else
                cout << "0 ";
        }
        cout << endl;
    }
}



#include <iostream>
using namespace std;
int main() {
    int n = 4;
    int size = n * (n + 1) / 2;
    int A[size] = {0};
    cout << "Enter elements for Upper Triangular Matrix:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            int x;
            cin >> x;
            if (i <= j)
                A[(j*(j - 1) / 2)+(i - 1)] = x;
        }
    }

    cout << "\nUpper Triangular Matrix:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i <= j)
                cout << A[(j * (j - 1) / 2) + (i - 1)] << " ";
            else
                cout << "0 ";
        }
        cout << endl;
    }
}



#include <iostream>
using namespace std;
int main() {
    int n = 4;
    int size = n*(n + 1)/2;
    int A[size] = {0};

    cout << "Enter elements for Symmetric Matrix:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            int x;
            cin >> x;
            if (i >= j)
                A[i * (i - 1) / 2 + (j - 1)] = x;
        }
    }
    cout << "\nSymmetric Matrix:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i >= j)
                cout << A[i * (i - 1) / 2 + (j - 1)] << " ";
            else
                cout << A[j * (j - 1) / 2 + (i - 1)] << " ";
        }
        cout << endl;
    }
}



#include <iostream>
using namespace std;
#define MAX 20
int main() {
    int A[MAX][3], B[MAX][3];
    int m, n, t;
    cout << "Enter rows, columns and non-zero elements: ";
    cin >> m >> n >> t;
    A[0][0] = m; A[0][1] = n; A[0][2] = t;
    cout << "Enter row, column and value:\n";
    for (int i = 1; i <= t; i++)
        cin >> A[i][0] >> A[i][1] >> A[i][2];
    B[0][0] = A[0][1];
    B[0][1] = A[0][0];
    B[0][2] = A[0][2];

    int k = 1;
    for (int i = 0; i < A[0][1]; i++) {   
        for (int j = 1; j <= t; j++) {
            if (A[j][1] == i) {
                B[k][0] = A[j][1];
                B[k][1] = A[j][0];
                B[k][2] = A[j][2];
                k++;
            }
        }
    }

    cout << "\nTranspose in triplet form:\n";
    cout << "Row\tCol\tVal\n";
    for (int i = 0; i <= B[0][2]; i++)
        cout << B[i][0] << "\t" << B[i][1] << "\t" << B[i][2] << endl;

    return 0;
}



#include <iostream>
using namespace std;
#define MAX 30
int main() {
    int A[MAX][3], B[MAX][3], C[MAX][3];
    int m, n, t1, t2;
    cout << "Enter rows, cols and non-zero elements for Matrix A: ";
    cin >> m >> n >> t1;
    A[0][0] = m; A[0][1] = n; A[0][2] = t1;
    cout << "Enter row, col and value for A:\n";
    for (int i = 1; i <= t1; i++)
        cin >> A[i][0] >> A[i][1] >> A[i][2];

    cout << "Enter non-zero elements for Matrix B: ";
    cin >> t2;
    B[0][0] = m; B[0][1] = n; B[0][2] = t2;

    cout << "Enter row, col and value for B:\n";
    for (int i = 1; i <= t2; i++)
        cin >> B[i][0] >> B[i][1] >> B[i][2];

    int i = 1, j = 1, k = 1;
    C[0][0] = m; C[0][1] = n;

    while (i <= t1 && j <= t2) {
        if (A[i][0] == B[j][0] && A[i][1] == B[j][1]) {
            C[k][0] = A[i][0];
            C[k][1] = A[i][1];
            C[k][2] = A[i][2] + B[j][2];
            i++; j++; k++;
        }
        else if (A[i][0] < B[j][0] || 
                (A[i][0] == B[j][0] && A[i][1] < B[j][1])) {
            C[k][0] = A[i][0];
            C[k][1] = A[i][1];
            C[k][2] = A[i][2];
            i++; k++;
        }
        else {
            C[k][0] = B[j][0];
            C[k][1] = B[j][1];
            C[k][2] = B[j][2];
            j++; k++;
        }
    }

    while (i <= t1) {
        C[k][0] = A[i][0];
        C[k][1] = A[i][1];
        C[k][2] = A[i][2];
        i++; k++;
    }

    while (j <= t2) {
        C[k][0] = B[j][0];
        C[k][1] = B[j][1];
        C[k][2] = B[j][2];
        j++; k++;
    }

    C[0][2] = k - 1;
    cout << "\nSum of matrices in triplet form:\n";
    cout << "Row\tCol\tVal\n";
    for (int p = 0; p <= C[0][2]; p++)
        cout << C[p][0] << "\t" << C[p][1] << "\t" << C[p][2] << endl;

    return 0;
}



#include <iostream>
using namespace std;
#define MAX 50

void transpose(int A[MAX][3], int B[MAX][3]) {
    int t = A[0][2], k = 1;
    B[0][0] = A[0][1];
    B[0][1] = A[0][0];
    B[0][2] = t;
    for (int i = 0; i < A[0][1]; i++) {
        for (int j = 1; j <= t; j++) {
            if (A[j][1] == i) {
                B[k][0] = A[j][1];
                B[k][1] = A[j][0];
                B[k][2] = A[j][2];
                k++;
            }
        }
    }
}

int main() {
    int A[MAX][3], B[MAX][3], C[MAX][3], BT[MAX][3];
    int m, n, t1, t2;
    cout << "Enter rows, cols, and non-zero elements for A: ";
    cin >> m >> n >> t1;
    A[0][0] = m; A[0][1] = n; A[0][2] = t1;

    cout << "Enter row, col, value for A:\n";
    for (int i = 1; i <= t1; i++)
        cin >> A[i][0] >> A[i][1] >> A[i][2];

    cout << "Enter rows, cols, and non-zero elements for B: ";
    cin >> B[0][0] >> B[0][1] >> B[0][2];
    t2 = B[0][2];

    cout << "Enter row, col, value for B:\n";
    for (int i = 1; i <= t2; i++)
        cin >> B[i][0] >> B[i][1] >> B[i][2];

    if (A[0][1] != B[0][0]) {
        cout << "Matrix multiplication not possible!";
        return 0;
    }

    transpose(B, BT);

    int k = 1;
    C[0][0] = A[0][0];
    C[0][1] = B[0][1];

    for (int i = 1; i <= A[0][2];) {
        int row = A[i][0];
        for (int j = 1; j <= BT[0][2];) {
            int col = BT[j][0];
            int sum = 0, ti = i, tj = j;

            while (ti <= A[0][2] && A[ti][0] == row &&
                   tj <= BT[0][2] && BT[tj][0] == col) {
                if (A[ti][1] < BT[tj][1]) ti++;
                else if (A[ti][1] > BT[tj][1]) tj++;
                else {
                    sum += A[ti][2] * BT[tj][2];
                    ti++; tj++;
                }
            }

            if (sum != 0) {
                C[k][0] = row;
                C[k][1] = col;
                C[k][2] = sum;
                k++;
            }

            while (tj <= BT[0][2] && BT[tj][0] == col) tj++;
        }
        while (i <= A[0][2] && A[i][0] == row) i++;
    }

    C[0][2] = k - 1;

    cout << "\nResult of multiplication in triplet form:\n";
    cout << "Row\tCol\tVal\n";
    for (int p = 0; p <= C[0][2]; p++)
        cout << C[p][0] << "\t" << C[p][1] << "\t" << C[p][2] << endl;

    return 0;
}



#include <iostream>
using namespace std;
int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    int A[100];
    cout << "Enter array elements:\n";
    for (int i = 0; i < n; i++)
        cin >> A[i];
    int count = 0;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (A[i] > A[j])
                count++;
        }
    }
    cout << "Total number of inversions = " << count << endl;
    return 0;
}



#include <iostream>
using namespace std;
int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;
    int A[100];
    cout << "Enter array elements:\n";
    for (int i = 0; i < n; i++)
        cin >> A[i];
    int distinct = 0;
    for (int i = 0; i < n; i++) {
        bool isDuplicate = false;
        for (int j = 0; j < i; j++) {
            if (A[i] == A[j]) {
                isDuplicate = true;
                break;
            }
        } if (!isDuplicate)
            distinct++;
    }
    cout << "Total number of distinct elements = " << distinct << endl;
    return 0;
}






